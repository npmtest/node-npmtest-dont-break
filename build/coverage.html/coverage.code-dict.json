{"/home/travis/build/npmtest/node-npmtest-dont-break/test.js":"/* istanbul instrument in package npmtest_dont_break */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-dont-break/lib.npmtest_dont_break.js":"/* istanbul instrument in package npmtest_dont_break */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_dont_break = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_dont_break = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-dont-break/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-dont-break && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_dont_break */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_dont_break\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_dont_break.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_dont_break.rollup.js'] =\n            local.assetsDict['/assets.npmtest_dont_break.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_dont_break.__dirname + '/lib.npmtest_dont_break.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-dont-break/node_modules/dont-break/index.js":"var dontBreak = require('./src/dont-break');\nmodule.exports = dontBreak;\n","/home/travis/build/npmtest/node-npmtest-dont-break/node_modules/dont-break/src/dont-break.js":"'use strict'\n\nvar la = require('lazy-ass')\nvar check = require('check-more-types')\nvar path = require('path')\nvar osTmpdir = require('os-tmpdir')\nvar join = path.join\nvar quote = require('quote')\nvar chdir = require('chdir-promise')\nvar banner = require('./banner')\nvar debug = require('debug')('dont-break')\nvar isRepoUrl = require('./is-repo-url')\n\nvar _ = require('lodash')\nvar q = require('q')\n\nvar npmInstall = require('npm-utils').install\nvar npmTest = require('npm-utils').test\nla(check.fn(npmTest), 'npm test should be a function', npmTest)\n\nvar fs = require('fs')\nvar read = fs.readFileSync\nvar exists = fs.existsSync\n\nvar stripComments = require('strip-json-comments')\n// write found dependencies into a hidden file\nvar dontBreakFilename = './.dont-break.json'\n\nvar NAME_COMMAND_SEPARATOR = ':'\nvar DEFAULT_TEST_COMMAND = 'npm test'\nvar INSTALL_TIMEOUT_SECONDS = 3 * 60\n\nvar install = require('./install-dependency')\n\nfunction readJSON (filename) {\n  la(exists(filename), 'cannot find JSON file to load', filename)\n  return JSON.parse(read(filename))\n}\n\nvar npm = require('top-dependents')\nla(check.schema({\n  downloads: check.fn,\n  sortedByDownloads: check.fn,\n  topDependents: check.fn\n}, npm), 'invalid npm methods', npm)\n\nfunction saveTopDependents (name, metric, n) {\n  la(check.unemptyString(name), 'invalid package name', name)\n  la(check.unemptyString(metric), 'invalid metric', metric)\n  la(check.positiveNumber(n), 'invalid top number', n)\n\n  var fetchTop = _.partial(npm.downloads, metric)\n  return q(npm.topDependents(name, n))\n    .then(fetchTop)\n    .then(npm.sortedByDownloads)\n    .then(function (dependents) {\n      la(check.array(dependents), 'cannot select top n, not a list', dependents)\n      console.log('limiting top downloads to first', n, 'from the list of', dependents.length)\n      return _.take(dependents, n)\n    })\n    .then(function saveToFile (topDependents) {\n      la(check.arrayOfStrings(topDependents), 'expected list of top strings', topDependents)\n      // TODO use template library instead of manual concat\n      var str = '// top ' + n + ' most dependent modules by ' + metric + ' for ' + name + '\\n'\n      str += '// data from NPM registry on ' + (new Date()).toDateString() + '\\n'\n      str += JSON.stringify(topDependents, null, 2) + '\\n'\n      return q.ninvoke(fs, 'writeFile', dontBreakFilename, str, 'utf-8').then(function () {\n        console.log('saved top', n, 'dependents for', name, 'by', metric, 'to', dontBreakFilename)\n        return topDependents\n      })\n    })\n}\n\nfunction getDependentsFromFile () {\n  return q.ninvoke(fs, 'readFile', dontBreakFilename, 'utf-8')\n    .then(stripComments)\n    .then(function (text) {\n      debug('loaded dependencies file', text)\n      return text\n    })\n    .then(JSON.parse)\n    .catch(function (err) {\n      // the file does not exist probably\n      console.log(err && err.message)\n      console.log('could not find file', quote(dontBreakFilename), 'in', quote(process.cwd()))\n      console.log('no dependent projects, maybe query NPM for projects that depend on this one.')\n      return []\n    })\n}\n\nfunction getDependents (options, name) {\n  options = options || {}\n  var forName = name\n\n  if (!name) {\n    var pkg = require(join(process.cwd(), 'package.json'))\n    forName = pkg.name\n  }\n\n  var firstStep\n\n  var metric, n\n  if (check.number(options.topDownloads)) {\n    metric = 'downloads'\n    n = options.topDownloads\n  } else if (check.number(options.topStarred)) {\n    metric = 'starred'\n    n = options.topStarred\n  }\n  if (check.unemptyString(metric) && check.number(n)) {\n    firstStep = saveTopDependents(forName, metric, n)\n  }\n\n  return q(firstStep).then(getDependentsFromFile)\n}\n\nfunction testInFolder (testCommand, folder) {\n  la(check.unemptyString(testCommand), 'missing test command', testCommand)\n  la(check.unemptyString(folder), 'expected folder', folder)\n  var cwd = process.cwd()\n  process.chdir(folder)\n  return npmTest(testCommand).then(function () {\n    console.log('tests work in', folder)\n    return folder\n  })\n  .catch(function (errors) {\n    console.error('tests did not work in', folder)\n    console.error('code', errors.code)\n    throw errors\n  })\n  .finally(function () {\n    process.chdir(cwd)\n  })\n}\n\nfunction testCurrentModuleInDependent (dependentFolder) {\n  la(check.unemptyString(dependentFolder), 'expected dependent folder', dependentFolder)\n\n  debug('testing the current module in %s', dependentFolder)\n  var thisFolder = process.cwd()\n  debug('current module folder %s', thisFolder)\n\n  var options = {\n    name: thisFolder\n  }\n\n  return chdir.to(dependentFolder)\n    .then(function () { return npmInstall(options) })\n    .then(function () {\n      console.log('Installed\\n %s\\n in %s', thisFolder, dependentFolder)\n    })\n    .finally(chdir.from)\n    .then(function () {\n      return dependentFolder\n    })\n}\n\nfunction getDependencyName (dependent) {\n  if (isRepoUrl(dependent)) {\n    debug('dependent is git repo url %s', dependent)\n    return dependent\n  }\n  const nameParts = dependent.split(NAME_COMMAND_SEPARATOR)\n  la(nameParts.length, 'expected at least module name', dependent)\n  const moduleName = nameParts[0].trim()\n  return moduleName\n}\n\nfunction getDependentVersion (pkg, name) {\n  if (check.object(pkg.dependencies) && pkg.dependencies[name]) {\n    return pkg.dependencies[name]\n  }\n  if (check.object(pkg.devDependencies) && pkg.devDependencies[name]) {\n    return pkg.devDependencies[name]\n  }\n}\n\nfunction testDependent (options, dependent) {\n  la(check.unemptyString(dependent), 'invalid dependent', dependent)\n  banner('  testing', quote(dependent))\n\n  const moduleName = getDependencyName(dependent)\n\n  function formFullFolderName () {\n    if (isRepoUrl(dependent)) {\n      // simple repo installation\n      return toFolder\n    } else {\n      // it was NPM install\n      return join(toFolder, 'lib', 'node_modules', moduleName)\n    }\n  }\n\n  // TODO grab test command from dependent object\n  // var nameParts = dependent.split(NAME_COMMAND_SEPARATOR)\n  // la(nameParts.length, 'expected at least module name', dependent)\n  // var moduleName = nameParts[0].trim()\n  // var moduleTestCommand = nameParts[1] || DEFAULT_TEST_COMMAND\n  var moduleTestCommand = DEFAULT_TEST_COMMAND\n  var testModuleInFolder = _.partial(testInFolder, moduleTestCommand)\n\n  var pkg = require(join(process.cwd(), 'package.json'))\n  var depName = pkg.name + '-v' + pkg.version + '-against-' + moduleName\n  var safeName = _.kebabCase(_.deburr(depName))\n  debug('original name \"%s\", safe \"%s\"', depName, safeName)\n  var toFolder = join(osTmpdir(), safeName)\n  console.log('testing folder %s', quote(toFolder))\n\n  var timeoutSeconds = options.timeout || INSTALL_TIMEOUT_SECONDS\n  la(check.positiveNumber(timeoutSeconds), 'wrong timeout', timeoutSeconds, options)\n\n  var installOptions = {\n    name: moduleName,\n    prefix: toFolder\n  }\n  return install(installOptions)\n    .timeout(timeoutSeconds * 1000, 'install timed out for ' + moduleName)\n    .then(formFullFolderName)\n    .then(function checkInstalledFolder (folder) {\n      la(check.unemptyString(folder), 'expected folder', folder)\n      la(exists(folder), 'expected folder to exist', folder)\n      return folder\n    })\n    .then(function printMessage (folder) {\n      var installedPackage = readJSON(join(folder, 'package.json'))\n      var moduleVersion = installedPackage.version\n      var currentVersion = getDependentVersion(installedPackage, pkg.name)\n      la(check.unemptyString(currentVersion),\n        'could not find dependency on', pkg.name,\n        'in module', installedPackage.name)\n      banner('installed', moduleName + '@' + moduleVersion,\n        '\\ninto', folder,\n        '\\ncurrently uses', pkg.name + '@' + currentVersion,\n        '\\nwill test', pkg.name + '@' + pkg.version)\n      return folder\n    })\n    .then(function installDependencies (folder) {\n      console.log('installing dev dependencies', folder)\n      var cwd = process.cwd()\n      process.chdir(folder)\n      return install({}).then(function () {\n        console.log('restoring current directory', cwd)\n        process.chdir(cwd)\n        return folder\n      }, function (err) {\n        console.error('Could not install dependencies in', folder)\n        console.error(err)\n        throw err\n      })\n    })\n    .then(testModuleInFolder)\n    .then(testCurrentModuleInDependent)\n    .then(testModuleInFolder)\n}\n\nfunction testDependents (options, dependents) {\n  la(check.array(dependents), 'expected dependents', dependents)\n\n  // TODO switch to parallel testing!\n  return dependents.reduce(function (prev, dependent) {\n    return prev.then(function () {\n      return testDependent(options, dependent)\n    })\n  }, q(true))\n}\n\nfunction dontBreakDependents (options, dependents) {\n  la(check.arrayOfStrings(dependents), 'invalid dependents', dependents)\n  debug('dependents', dependents)\n\n  dependents = _.invoke(dependents, 'trim')\n  banner('  testing the following dependents\\n  ' + dependents)\n\n  var logSuccess = function logSuccess () {\n    console.log('all dependents tested')\n  }\n\n  return testDependents(options, dependents)\n    .then(logSuccess)\n}\n\nfunction dontBreak (options) {\n  if (check.unemptyString(options)) {\n    options = {\n      folder: options\n    }\n  }\n  options = options || {}\n  options.folder = options.folder || process.cwd()\n\n  debug('working in folder %s', options.folder)\n  var start = chdir.to(options.folder)\n\n  if (check.arrayOfStrings(options.dep)) {\n    start = start.then(function () {\n      return options.dep\n    })\n  } else {\n    start = start.then(function () {\n      debug('getting dependents')\n      return getDependents(options)\n    })\n  }\n\n  var logPass = function logPass () {\n    console.log('PASS: Current version does not break dependents')\n    return true\n  }\n\n  var logFail = function logFail (err) {\n    console.log('FAIL: Current version breaks dependents')\n    if (err && err.message) {\n      console.error('REPORTED ERROR:', err.message)\n      if (err.stack) {\n        console.error(err.stack)\n      }\n    }\n    return false\n  }\n\n  return start\n    .then(_.partial(dontBreakDependents, options))\n    .then(logPass, logFail)\n    .finally(chdir.from)\n}\n\nmodule.exports = dontBreak\n","/home/travis/build/npmtest/node-npmtest-dont-break/node_modules/dont-break/src/banner.js":"var _ = require('lodash')\nvar hr = require('hr').hr\n\nfunction banner () {\n  var args = _.toArray(arguments)\n  hr('=')\n  console.log(args.join(' '))\n  hr('-')\n}\n\nmodule.exports = banner\n","/home/travis/build/npmtest/node-npmtest-dont-break/node_modules/dont-break/src/is-repo-url.js":"var is = require('check-more-types')\n\nfunction isGitHub (s) {\n  return s.indexOf('github') !== -1\n}\n\nfunction isRepoUrl (s) {\n  return (is.git(s) || is.url(s)) && isGitHub(s)\n}\n\nmodule.exports = isRepoUrl\n","/home/travis/build/npmtest/node-npmtest-dont-break/node_modules/dont-break/src/install-dependency.js":"'use strict'\n\nvar q = require('q')\nvar la = require('lazy-ass')\nvar check = require('check-more-types')\nvar isRepoUrl = require('./is-repo-url')\nvar debug = require('debug')('dont-break')\nvar exists = require('fs').existsSync\nvar rimraf = require('rimraf')\nvar chdir = require('chdir-promise')\n\nvar npmInstall = require('npm-utils').install\nla(check.fn(npmInstall), 'install should be a function', npmInstall)\nvar cloneRepo = require('ggit').cloneRepo\n\nfunction removeFolder (folder) {\n  if (exists(folder)) {\n    debug('removing folder %s', folder)\n    rimraf.sync(folder)\n  }\n}\n\nfunction install (options) {\n  if (isRepoUrl(options.name)) {\n    debug('installing repo %s', options.name)\n    removeFolder(options.prefix)\n    return q(cloneRepo({\n      url: options.name,\n      folder: options.prefix\n    })).then(function () {\n      console.log('cloned %s', options.name)\n    })\n    .then(function () { return chdir.to(options.prefix) })\n    .then(function () {\n      console.log('running NPM install in %s', process.cwd())\n    })\n    .then(npmInstall)\n    .finally(chdir.from)\n  } else {\n    return q(npmInstall(options))\n  }\n}\n\nmodule.exports = install\n\nif (!module.parent) {\n  // quick and dirty test of module install\n  var join = require('path').join\n  var osTmpdir = require('os-tmpdir')\n  var folder = join(osTmpdir(), 'test-install')\n  console.log('tmp folder for testing')\n  console.log(folder)\n\n  install({\n    // name: 'boggle-connect',\n    name: 'https://github.com/bahmutov/dont-break-bar',\n    prefix: folder\n  })\n  .then(function () {\n    console.log('all done')\n  }, function (err) {\n    console.error('Could not install')\n    console.error(err)\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-dont-break/node_modules/dont-break/src/check-updates.js":"(function checkForUpdates () {\n  var thisPackage = require('../package.json')\n  require('update-notifier')({\n    packageName: thisPackage.name,\n    packageVersion: thisPackage.version\n  }).notify()\n}())\n","/home/travis/build/npmtest/node-npmtest-dont-break/node_modules/dont-break/src/cli-options.js":"'use strict'\n\nvar debug = require('debug')('dont-break')\nfunction list (val) {\n  return val.split(',')\n}\n\nvar program = require('commander')\nprogram\n  .option('-t, --top-downloads <n>',\n    'Fetch N most downloaded dependent modules, save and check', parseInt)\n  .option('-s, --top-starred <n>',\n    'Fetch N most starred dependent modules, save and check', parseInt)\n  .option('-d, --dep <name1,name2,name3>',\n    'Check if current code breaks given dependent project(s)', list)\n  .option('--timeout <N seconds>',\n    'Wait for N seconds when installing a package', parseInt)\n  .parse(process.argv)\n\ndebug('command line options')\ndebug(program)\n\nmodule.exports = program\n"}